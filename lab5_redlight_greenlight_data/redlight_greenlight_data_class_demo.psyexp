<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.1.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'hit_outcome': '1', 'fa_outcome': '0', 'hits_goal': '20', 'num_go_trials': '200', 'num_nogo_trials': '100'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1536, 864]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="redlight_greenlight_approach_class_demo" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="instr">
      <TextComponent name="instr_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="num"/>
        <Param name="name" updates="None" val="instr_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="20" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="The game that you are about to play is called Red Light, Green Light. You will see a rapid serial presentation of two dolls - one facing forward and the other facing backwards. Whenever you see a doll facing backwards (&quot;Green Light&quot;), you will respond by pressing the space bar as quickly as you can. Whenever you see a doll facing forwards (&quot;Red Light&quot;), you will withhold responding. &amp;#10;&amp;#10;When you're ready, please press the spacebar to begin!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="intr_kb">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="intr_kb" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="20" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# Import these modules:&amp;#10;import random&amp;#10;&amp;#10;# Create list sequence of 1's and 0's:&amp;#10;num_0s = int(expInfo['num_go_trials'])&amp;#10;num_1s = int(expInfo['num_nogo_trials'])&amp;#10;sequence = []&amp;#10;for i in range(num_0s):&amp;#10;    sequence.append(0)&amp;#10;for i in range(num_1s):&amp;#10;    sequence.append(1)&amp;#10;&amp;#10;# Randomize the sequence:&amp;#10;random.shuffle(sequence)&amp;#10;&amp;#10;# Translate sequence to its corresponding image:&amp;#10;image_names = [&quot;resources/squid_game_doll_backward&quot;,&quot;resources/squid_game_doll_forward&quot;]&amp;#10;im_sequence = []&amp;#10;for i in sequence:&amp;#10;    im_sequence.append(image_names[i])&amp;#10;&amp;#10;# Some specifications:&amp;#10;seq_len = len(sequence) # specify the nReps&amp;#10;distance_counter = 0    # initiate distance counter&amp;#10;distance_goal = int(expInfo['hits_goal'])      # specify &quot;distance&quot; goal (aka number of hits)&amp;#10;&amp;#10;min_w = .14             # min or starting width of the doll&amp;#10;min_h = .2              # min or starting height&amp;#10;&amp;#10;max_w = .56             # max or ending width&amp;#10;max_h = .8              # max or ending height&amp;#10;&amp;#10;inc_w = (max_w - min_w)/distance_goal   # calculate a sensible increment (how much to increase by with each hit?)&amp;#10;inc_h = (max_h - min_h)/distance_goal&amp;#10;&amp;#10;# Audio Object&amp;#10;background_sound = sound.Sound('resources\pink_soldiers_song.wav')" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import * as random from 'random';&amp;#10;var background_sound, distance_counter, distance_goal, im_sequence, image_names, inc_h, inc_w, max_h, max_w, min_h, min_w, num_0s, num_1s, seq_len, sequence;&amp;#10;num_0s = Number.parseInt(expInfo[&quot;num_go_trials&quot;]);&amp;#10;num_1s = Number.parseInt(expInfo[&quot;num_nogo_trials&quot;]);&amp;#10;sequence = [];&amp;#10;for (var i = 0, _pj_a = num_0s; (i &lt; _pj_a); i += 1) {&amp;#10;    sequence.append(0);&amp;#10;}&amp;#10;for (var i = 0, _pj_a = num_1s; (i &lt; _pj_a); i += 1) {&amp;#10;    sequence.append(1);&amp;#10;}&amp;#10;random.shuffle(sequence);&amp;#10;image_names = [&quot;resources/squid_game_doll_backward&quot;, &quot;resources/squid_game_doll_forward&quot;];&amp;#10;im_sequence = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = sequence, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    im_sequence.append(image_names[i]);&amp;#10;}&amp;#10;seq_len = sequence.length;&amp;#10;distance_counter = 0;&amp;#10;distance_goal = Number.parseInt(expInfo[&quot;hits_goal&quot;]);&amp;#10;min_w = 0.14;&amp;#10;min_h = 0.2;&amp;#10;max_w = 0.56;&amp;#10;max_h = 0.8;&amp;#10;inc_w = ((max_w - min_w) / distance_goal);&amp;#10;inc_h = ((max_h - min_h) / distance_goal);&amp;#10;background_sound = new sound.Sound(&quot;resources\\pink_soldiers_song.wav&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="doll_im_path = im_sequence[trials.thisRepN];&amp;#10;im_w = (min_w + (distance_counter * inc_w));&amp;#10;im_h = (min_h + (distance_counter * inc_h));&amp;#10;if ((background_sound.status !== 1)) {&amp;#10;    background_sound.play();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# grab the im path for this trial&amp;#10;doll_im_path = im_sequence[trials.thisRepN]&amp;#10;&amp;#10;# update doll im size&amp;#10;im_w = min_w + distance_counter*inc_w&amp;#10;im_h = min_h + distance_counter*inc_h&amp;#10;&amp;#10;&amp;#10;# start song if previous run has not finished&amp;#10;if background_sound.status != 1:&amp;#10;    background_sound.play()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((sequence[trials.thisRepN] === 0) &amp;&amp; (task_kb.keys === &quot;space&quot;))) {&amp;#10;    distance_counter = (distance_counter + Number.parseInt(expInfo[&quot;hit_outcome&quot;]));&amp;#10;} else {&amp;#10;    if (((sequence[trials.thisRepN] === 1) &amp;&amp; (task_kb.keys === &quot;space&quot;))) {&amp;#10;        if ((expInfo[&quot;fa_outcome&quot;] === &quot;beginning&quot;)) {&amp;#10;            distance_counter = 0;&amp;#10;        } else {&amp;#10;            if ((distance_counter &gt;= Number.parseInt(expInfo[&quot;fa_outcome&quot;]))) {&amp;#10;                distance_counter = (distance_counter - Number.parseInt(expInfo[&quot;fa_outcome&quot;]));&amp;#10;            } else {&amp;#10;                distance_counter = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;console.log(distance_counter);&amp;#10;if ((distance_counter === distance_goal)) {&amp;#10;    background_sound.stop();&amp;#10;    trials.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# update distance counter &amp;#10;if sequence[trials.thisRepN] == 0 and task_kb.keys == 'space':      # test for HIT&amp;#10;    distance_counter = distance_counter + int(expInfo['hit_outcome'])&amp;#10;elif sequence[trials.thisRepN] == 1 and task_kb.keys == 'space':    # test for FA&amp;#10;    if expInfo['fa_outcome'] == &quot;beginning&quot;:&amp;#10;        distance_counter = 0&amp;#10;    else:&amp;#10;        if distance_counter &gt;= int(expInfo['fa_outcome']):&amp;#10;            distance_counter = distance_counter - int(expInfo['fa_outcome'])&amp;#10;        else:&amp;#10;            distance_counter = 0&amp;#10;&amp;#10;&amp;#10;print(distance_counter)&amp;#10;&amp;#10;# if dist counter == dist goal, end loop&amp;#10;if distance_counter == distance_goal:&amp;#10;    background_sound.stop()&amp;#10;    trials.finished = True" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <ImageComponent name="doll_im">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$doll_im_path" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="doll_im" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="set every repeat" val="[im_w, im_h]" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="task_kb">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="task_kb" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.6" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="log_data">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="import pandas as pd&amp;#10;&amp;#10;session_list = list()" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="&amp;#10;        // add-on: list(s: string): string[]&amp;#10;        function list(s) {&amp;#10;            // if s is a string, we return a list of its characters&amp;#10;            if (typeof s === 'string')&amp;#10;                return s.split('');&amp;#10;            else&amp;#10;                // otherwise we return s:&amp;#10;                return s;&amp;#10;        }&amp;#10;&amp;#10;        import * as pd from 'pandas';&amp;#10;var session_list;&amp;#10;session_list = list();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((sequence[trials.thisRepN] === 0)) {&amp;#10;    trial_type = &quot;go&quot;;&amp;#10;} else {&amp;#10;    if ((sequence[trials.thisRepN] === 1)) {&amp;#10;        trial_type = &quot;nogo&quot;;&amp;#10;    }&amp;#10;}&amp;#10;resp = task_kb.keys;&amp;#10;rt = task_kb.rt;&amp;#10;trial_list = [trial_type, resp, rt];&amp;#10;session_list.append(trial_list);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# Is this a nogo or go trial?&amp;#10;if sequence[trials.thisRepN] == 0:&amp;#10;    trial_type = &quot;go&quot;&amp;#10;elif sequence[trials.thisRepN] == 1:&amp;#10;    trial_type = &quot;nogo&quot;&amp;#10;&amp;#10;&amp;#10;resp = task_kb.keys&amp;#10;rt = task_kb.rt&amp;#10;&amp;#10;&amp;#10;trial_list = [trial_type, resp, rt]&amp;#10;&amp;#10;session_list.append(trial_list)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="log_data" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="task_kb_keys = trials.data[&quot;task_kb.keys&quot;];&amp;#10;commission_error_count = 0;&amp;#10;nogo_count = 0;&amp;#10;for (var i = 0, _pj_a = task_kb_keys[0].length; (i &lt; _pj_a); i += 1) {&amp;#10;    if ((sequence[i] === 1)) {&amp;#10;        nogo_count += 1;&amp;#10;        if ((task_kb_keys[0][i] === &quot;space&quot;)) {&amp;#10;            commission_error_count += 1;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;commission_error_rate = (commission_error_count / nogo_count);&amp;#10;feedback_str = (&quot;Commission error rate: &quot; + commission_error_rate.toString());&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Grabs the keys for task_kb&amp;#10;task_kb_keys = trials.data['task_kb.keys']&amp;#10;&amp;#10;# Counts of commission errors and nogo trials&amp;#10;commission_error_count = 0&amp;#10;nogo_count = 0&amp;#10;for i in range(len(task_kb_keys[0])):&amp;#10;    # Checks if it is a nogo trial&amp;#10;    if sequence[i] == 1:&amp;#10;        nogo_count += 1&amp;#10;        # Checks if a space was pressed (and it was a nogo trial)&amp;#10;        if task_kb_keys[0][i] == 'space':&amp;#10;            commission_error_count += 1&amp;#10;&amp;#10;# Calculate commision error rate based on counts&amp;#10;commission_error_rate = commission_error_count/nogo_count&amp;#10;&amp;#10;# build the feedback string&amp;#10;feedback_str = 'Commission error rate: ' + str(commission_error_rate)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="fb_text">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="fb_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="20" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$feedback_str" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="fb_kb">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="fb_kb" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="20" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="game_over">
      <PolygonComponent name="polygon">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="fillColor" updates="constant" val="$(0.7255, -0.8431, -0.5294)" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="white" valType="color"/>
        <Param name="lineWidth" updates="constant" val="1" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="polygon" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(3,3)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <ImageComponent name="angry_doll_im">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="resources\squid_game_doll_angry.png" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="angry_doll_im" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="set every repeat" val="[im_w, im_h]" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="continueRoutine = false;&amp;#10;if (((sequence[trials.thisRepN] === 1) &amp;&amp; (task_kb.keys === &quot;space&quot;))) {&amp;#10;    continueRoutine = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="continueRoutine = False&amp;#10;if sequence[trials.thisRepN] == 1 and task_kb.keys == 'space':    # test for FA&amp;#10;    continueRoutine = True&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="finished">
      <CodeComponent name="write_data">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="session_df = new pd.DataFrame(session_list, {&quot;columns&quot;: [&quot;trial_type&quot;, &quot;resp&quot;, &quot;rt&quot;]});&amp;#10;output_filepath = ((&quot;sub-&quot; + expInfo[&quot;participant&quot;]) + &quot;_redlight_greenlight.csv&quot;);&amp;#10;session_df.to_csv(output_filepath);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="session_df = pd.DataFrame(session_list,&amp;#10;                         columns = [&quot;trial_type&quot;, &quot;resp&quot;, &quot;rt&quot;])&amp;#10;&amp;#10;output_filepath = 'sub-' + expInfo['participant'] + '_redlight_greenlight.csv'&amp;#10;&amp;#10;session_df.to_csv(output_filepath)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="write_data" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instr"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="seq_len" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="game_over"/>
    <LoopTerminator name="trials"/>
    <Routine name="finished"/>
  </Flow>
</PsychoPy2experiment>
